import java.text.SimpleDateFormat

/**************************************************************************************************
                                        GRADLE CONFIG
 *************************************************************************************************/
plugins {
    id 'com.android.library'
    id 'maven-publish'
    id 'com.palantir.git-version' version '3.0.0'
}

if ((new File(gradle.local)).exists()) {
    apply from: gradle.local
} else {
    apply from: gradle.remote
}

libraryScripts.each {
    apply from: it
}
//Get project details using gitVersion plugin
def projectDetails = versionDetails()
def date = new SimpleDateFormat("yyyyMMddHHmmss")
String formattedDate = date.format(new Date())

group = groupId

android {
  
    // The following are set in the common.gradle file
    compileSdkVersion(compileVersion)
    buildToolsVersion(buildTools)

    defaultConfig {
        minSdkVersion(minVersion)
        targetSdkVersion(targetVersion)
        versionCode(releaseVersionCode)
        versionName(versionCodeName)
        testInstrumentationRunner(instrumentationRunner)
    }

	    // set by command line arguments
    defaultPublishConfig(gradle.ext.odkDefaultPublishConfig)

    flavorDimensions "stage", "testing"

    productFlavors {
        demo {
            dimension 'stage'
        }

        master {
            dimension 'stage'
        }

        snapshot {
            dimension 'stage'
        }

        basic {
            dimension 'testing'
        }

        uitest {
            minSdkVersion(uitestMinSDK)
            dimension 'testing'
        }
    }

    buildTypes {
        release {
            minifyEnabled(minify)
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
        debug {
            debuggable(true)
            testCoverageEnabled(testCoverage) // Allows AndroidTest JaCoCo reports to be generated
        }
    }

    packagingOptions { // Pick first occurrence of any files that cause conflicts, as defined in common.gradle
        packageList.each {
            pickFirst it
        }
    }

    compileOptions {
        sourceCompatibility javaVersion
        targetCompatibility javaVersion
    }

}

configurations.all {
  resolutionStrategy {
      cacheDynamicVersionsFor(0, 'seconds')
      cacheChangingModulesFor(0, 'seconds')
  }
}

allprojects {
    tasks.withType(JavaCompile) {
        options.compilerArgs << "-Xlint:deprecation" << "-Xlint:unchecked"
    }
}

dependencies {
    implementation 'androidx.annotation:annotation:1.3.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'com.google.android.material:material:1.4.0'
    if (libraryProjectPath.exists() && gradle.useLocal) { // Local project is favoured
        implementation project(libraryProjectName)
    } else {
        ///Todo: properly specify all flavour implementations of the androidLibrary
        implementation(group:'org.opendatakit', name: 'androidlibrary_lib', classifier: 'snapshotBasicRelease', version: '1.0.0-+', ext: 'aar')
//        demoImplementation(group: groupId, name: libraryDemoArtifactName, classifier: demoRelease,
//                    version: latestVersion, ext: 'aar')
//        masterImplementation(group: groupId, name: libraryMasterArtifactName, classifier: masterRelease,
//                      version: masterArtifactVersion, ext: 'aar')
//        snapshotImplementation(group: groupId, name: librarySnapshotArtifactName,
//                classifier: snapshotRelease, version: latestVersion, ext: 'aar')
 }

    // Testing dependencies
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:runner:1.4.0'
}

publishing {
    repositories{
        maven {
            name = "GithubPackages"
            url = "https://maven.pkg.github.com/${System.getenv('GITHUB_ACTOR')}/androidcommon"
            //This should be replaced with odk-x/androidlibrary. Should be hardcoded or use gitversion?

            credentials {
                username = System.getenv('GITHUB_ACTOR')
                password = System.getenv('GITHUB_TOKEN')
            }
        }
    }
    publications {
        aarRelease(MavenPublication) {
            groupId = "org.opendatakit"
            artifactId = 'androidcommon'
            version = "1.0.0-${formattedDate}-${projectDetails.gitHash}"
            afterEvaluate{
                artifact spawnCommonSnapshotBasicArchives
            }
        }
        aarDebug(MavenPublication) {
            groupId = "org.opendatakit"
            artifactId = 'androidcommon'
            version = "1.0.0-debug-${formattedDate}-${projectDetails.gitHash}"
            afterEvaluate{
                artifact spawnCommonSnapshotBasicArchives
            }
        }
    }

}


task spawnCommonSnapshotBasicArchives(type: Jar) {
    dependsOn('snapshotVersion')
    dependsOn('assembleSnapshotBasicDebug')
    dependsOn('assembleSnapshotBasicRelease')
    doLast {
        bundleSnapshotBasicReleaseAar.classifier snapshotRelease
        bundleSnapshotBasicDebugAar.classifier snapshotDebug

        publishing.publications.aarRelease.artifact bundleSnapshotBasicReleaseAar
        publishing.publications.aarDebug.artifact bundleSnapshotBasicDebugAar

        project.getArtifacts().add("default", bundleSnapshotBasicDebugAar)
    }
    archiveExtension = 'aar'
}

task spawnCommonDemoBasicArchives(type: Jar) {
    dependsOn('snapshotVersion')
    dependsOn('assembleDemoBasicDebug')
    dependsOn('assembleDemoBasicRelease')
    doLast {
        bundleDemoBasicReleaseAar.classifier demoRelease
        bundleDemoBasicDebugAar.classifier demoDebug

        publishing.publications.aarRelease.artifact bundleDemoBasicReleaseAar
        publishing.publications.aarDebug.artifact bundleDemoBasicDebugAar

        project.getArtifacts().add("default", bundleDemoBasicDebugAar)
    }
    archiveExtension = 'aar'
}
publish.dependsOn(spawnCommonSnapshotBasicArchives)
